"""Admin management handlers for users, payments, and notifications."""

from typing import Any, Dict
from datetime import datetime

from aiogram.types import CallbackQuery
from aiogram import F

from infrastructure.telegram.handlers.base_handler import BaseHandler
from infrastructure.telegram.keyboards.admin_keyboard import AdminKeyboard
from app.dependencies import container
from app.dependencies import (
    get_user_service,
    get_statistics_service,
    get_order_service,
    get_payment_service,
)


class AdminManagementHandlers(BaseHandler):
    """Handlers for admin management operations."""

    def _register_handlers(self) -> None:
        """Register handlers - not needed as handlers are registered in AdminHandler."""
        pass

    # Users management handlers
    async def handle_users_callback(self, callback: CallbackQuery, **kwargs) -> None:
        """Handle users management callbacks."""
        data = kwargs.get("data", {})

        callback_data = callback.data
        parts = callback_data.split(":")
        action = parts[1]

        session = data.get("session")
        if session is None:
            user_service = await get_user_service(data)
            statistics_service = await get_statistics_service(data)
        else:
            user_service = container.get_user_service(session)
            statistics_service = container.get_statistics_service(session)

        try:
            if action == "all":
                users = await user_service.get_all_users()
                text = f"üë• <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n–ù–∞–π–¥–µ–Ω–æ: {len(users)}"
                keyboard = AdminKeyboard.get_users_list_keyboard(users)
            elif action == "new_today":
                today = datetime.now().date()
                users = await user_service.get_users_by_date(today)
                text = f"üÜï <b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è</b>\n\n–ù–∞–π–¥–µ–Ω–æ: {len(users)}"
                keyboard = AdminKeyboard.get_users_list_keyboard(users)
            elif action == "stats":
                user_stats = await statistics_service.get_user_statistics()
                text = f"üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                text += f"üë§ –í—Å–µ–≥–æ: {user_stats['total_users']}\n"
                text += f"üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_stats['new_users_today']}\n"
                text += f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_stats['active_users_today']}"
                keyboard = AdminKeyboard.get_back_to_admin_keyboard()
            else:
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                return

            await self.safe_edit_message(
                callback.message,
                text=text,
                reply_markup=keyboard
            )

        except Exception as e:
            self.logger.error(f"Users callback error: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        await callback.answer()

    async def handle_user_detail_callback(self, callback: CallbackQuery, **kwargs) -> None:
        """Handle user detail callback."""
        data = kwargs.get("data", {})

        callback_data = callback.data
        parts = callback_data.split(":")
        target_user_id = parts[1]

        session = data.get("session")
        if session is None:
            user_service = await get_user_service(data)
        else:
            user_service = container.get_user_service(session)

        try:
            user = await user_service.get_user_by_id(target_user_id)
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            text = f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
            text += f"üÜî ID: {user.user_id}\n"
            text += f"üì± Telegram ID: {user.telegram_id}\n"
            text += f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            text += f"üë§ –§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            text += f"üìù Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            text += f"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if user.is_active else '–ù–µ—Ç'}\n"
            from shared.types.user_types import UserStatus
            text += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if getattr(user, 'status', None) == UserStatus.BLOCKED else '–ù–µ—Ç'}\n"
            text += f"üë®‚Äçüíº –ê–¥–º–∏–Ω: {'–î–∞' if user.is_admin else '–ù–µ—Ç'}\n"
            text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}"

            keyboard = AdminKeyboard.get_user_detail_keyboard(user)
            
            await self.safe_edit_message(
                callback.message,
                text=text,
                reply_markup=keyboard
            )

        except Exception as e:
            self.logger.error(f"User detail callback error: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        await callback.answer()

    async def handle_user_management_callback(self, callback: CallbackQuery, **kwargs) -> None:
        """Handle user management callbacks (block/unblock)."""
        data = kwargs.get("data", {})

        callback_data = callback.data
        parts = callback_data.split(":")
        # Support formats:
        #  - "user_block:{user_id}"
        #  - "user_unblock:{user_id}"
        #  - "user_orders:{user_id}"
        #  - legacy: "user:{action}:{user_id}"
        action: str | None = None
        target_user_id: str | None = None
        if callback_data.startswith("user_"):
            token = parts[0]
            action = token.split("_", 1)[1] if "_" in token else None
            target_user_id = parts[1] if len(parts) > 1 else None
        elif parts and parts[0] == "user" and len(parts) >= 3:
            action = parts[1]
            target_user_id = parts[2]
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return

        if not target_user_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        session = data.get("session")
        if session is None:
            user_service = await get_user_service(data)
        else:
            user_service = container.get_user_service(session)

        try:
            if action == "block":
                success = await user_service.block_user(target_user_id)
                if success:
                    await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                else:
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            elif action == "unblock":
                success = await user_service.unblock_user(target_user_id)
                if success:
                    await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                else:
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            elif action == "orders":
                # Show user orders
                if session is None:
                    order_service = await get_order_service(data)
                else:
                    order_service = container.get_order_service(session)
                orders = await order_service.get_orders_by_user_id(target_user_id)
                
                text = f"üìã <b>–ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                if orders:
                    text += f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}\n\n"
                    for order in orders[:5]:  # Show first 5 orders
                        text += f"‚Ä¢ #{order.order_id[:8]} - {order.status.value} - {order.total // 100}‚ÇΩ\n"
                    if len(orders) > 5:
                        text += f"\n... –∏ –µ—â–µ {len(orders) - 5} –∑–∞–∫–∞–∑–æ–≤"
                else:
                    text += "–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
                keyboard = AdminKeyboard.get_back_to_admin_keyboard()
                
                await self.safe_edit_message(
                    callback.message,
                    text=text,
                    reply_markup=keyboard
                )
            elif action in ("make_admin", "remove_admin"):
                # Toggle admin role
                user = await user_service.get_user_by_id(target_user_id)
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                from shared.types.user_types import UserRole
                if action == "make_admin":
                    user.role = UserRole.ADMIN
                    await user_service.update_user(user)
                    await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                else:
                    user.role = UserRole.CUSTOMER
                    await user_service.update_user(user)
                    await callback.answer("‚úÖ –†–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç–∞")

                # Refresh detail view with updated keyboard
                text = f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
                text += f"üÜî ID: {user.user_id}\n"
                text += f"üì± Telegram ID: {user.telegram_id}\n"
                text += f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                text += f"üë§ –§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                text += f"üìù Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                text += f"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if user.is_active else '–ù–µ—Ç'}\n"
                from shared.types.user_types import UserStatus
                text += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if getattr(user, 'status', None) == UserStatus.BLOCKED else '–ù–µ—Ç'}\n"
                text += f"üë®‚Äçüíº –ê–¥–º–∏–Ω: {'–î–∞' if user.is_admin else '–ù–µ—Ç'}\n"
                text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}"

                kb = AdminKeyboard.get_user_detail_keyboard(user)
                await self.safe_edit_message(
                    callback.message,
                    text=text,
                    reply_markup=kb
                )
            else:
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                return

        except Exception as e:
            self.logger.error(f"User management callback error: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return

        await callback.answer()

    # Payments management handlers
    async def handle_payments_callback(self, callback: CallbackQuery, **kwargs) -> None:
        """Handle payments management callbacks."""
        data = kwargs.get("data", {})

        callback_data = callback.data
        parts = callback_data.split(":")
        action = parts[1]

        session = data.get("session")
        payment_service = container.get_payment_service(session)

        try:
            if action == "all":
                payments = await payment_service.get_all_payments()
                text = f"üí∞ <b>–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏</b>\n\n–ù–∞–π–¥–µ–Ω–æ: {len(payments)}"
                keyboard = AdminKeyboard.get_payments_list_keyboard(payments)
            elif action == "pending":
                payments = await payment_service.get_payments_by_status("pending")
                text = f"‚è≥ <b>–û–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏</b>\n\n–ù–∞–π–¥–µ–Ω–æ: {len(payments)}"
                keyboard = AdminKeyboard.get_payments_list_keyboard(payments)
            elif action == "completed":
                payments = await payment_service.get_payments_by_status("succeeded")
                text = f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏</b>\n\n–ù–∞–π–¥–µ–Ω–æ: {len(payments)}"
                keyboard = AdminKeyboard.get_payments_list_keyboard(payments)
            elif action == "failed":
                payments = await payment_service.get_payments_by_status("failed")
                text = f"‚ùå <b>–ù–µ—É–¥–∞—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏</b>\n\n–ù–∞–π–¥–µ–Ω–æ: {len(payments)}"
                keyboard = AdminKeyboard.get_payments_list_keyboard(payments)
            else:
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                return

            await self.safe_edit_message(
                callback.message,
                text=text,
                reply_markup=keyboard
            )

        except Exception as e:
            self.logger.error(f"Payments callback error: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π")
            return

        await callback.answer()

    async def handle_payment_detail_callback(self, callback: CallbackQuery, **kwargs) -> None:
        """Handle payment detail callback."""
        data = kwargs.get("data", {})

        callback_data = callback.data
        parts = callback_data.split(":")
        payment_id = parts[1]

        session = data.get("session")
        payment_service = container.get_payment_service(session)

        try:
            payment = await payment_service.get_payment_by_id(payment_id)
            if not payment:
                await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            text = f"üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ</b>\n\n"
            text += f"üÜî ID: {payment.id}\n"
            text += f"üí≥ –°—É–º–º–∞: {payment.amount // 100}‚ÇΩ\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {payment.status.value}\n"
            text += f"üí≥ –ú–µ—Ç–æ–¥: {payment.payment_method.value}\n"
            text += f"üìÖ –î–∞—Ç–∞: {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            if payment.payment_url:
                text += f"üîó –°—Å—ã–ª–∫–∞: {payment.payment_url}"

            keyboard = AdminKeyboard.get_payment_detail_keyboard(payment)
            
            await self.safe_edit_message(
                callback.message,
                text=text,
                reply_markup=keyboard
            )

        except Exception as e:
            self.logger.error(f"Payment detail callback error: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞—Ç–µ–∂–∞")
            return

        await callback.answer()

    async def handle_payment_management_callback(self, callback: CallbackQuery, **kwargs) -> None:
        """Handle payment management callbacks (refund/cancel)."""
        data = kwargs.get("data", {})

        callback_data = callback.data
        parts = callback_data.split(":")
        action = parts[1]  # refund, cancel
        payment_id = parts[2]

        session = data.get("session")
        payment_service = container.get_payment_service(session)

        try:
            if action == "refund":
                success = await payment_service.refund_payment(payment_id)
                if success:
                    await callback.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –≤–æ–∑–≤—Ä–∞—â–µ–Ω")
                else:
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –ø–ª–∞—Ç–µ–∂")
            elif action == "cancel":
                success = await payment_service.cancel_payment(payment_id)
                if success:
                    await callback.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω")
                else:
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂")
            else:
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                return

        except Exception as e:
            self.logger.error(f"Payment management callback error: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–æ–º")
            return

        await callback.answer()

    # Notifications management handlers
    async def handle_notifications_callback(self, callback: CallbackQuery, **kwargs) -> None:
        """Handle notifications management callbacks."""
        data = kwargs.get("data", {})

        callback_data = callback.data
        parts = callback_data.split(":")
        action = parts[1]

        try:
            if action == "send":
                text = "üì¢ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
                keyboard = AdminKeyboard.get_notification_templates_keyboard()
            elif action == "templates":
                text = "üìù <b>–®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
                keyboard = AdminKeyboard.get_notification_templates_keyboard()
            elif action == "history":
                text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –∑–¥–µ—Å—å"
                keyboard = AdminKeyboard.get_back_to_admin_keyboard()
            else:
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                return

            await self.safe_edit_message(
                callback.message,
                text=text,
                reply_markup=keyboard
            )

        except Exception as e:
            self.logger.error(f"Notifications callback error: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return

        await callback.answer()

    async def handle_notification_template_callback(self, callback: CallbackQuery, **kwargs) -> None:
        """Handle notification template callback."""
        data = kwargs.get("data", {})

        callback_data = callback.data
        parts = callback_data.split(":")
        template_type = parts[1]

        try:
            # Placeholder for template management
            text = f"üìù <b>–®–∞–±–ª–æ–Ω: {template_type}</b>\n\n"
            text += "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            
            keyboard = AdminKeyboard.get_back_to_admin_keyboard()
            
            await self.safe_edit_message(
                callback.message,
                text=text,
                reply_markup=keyboard
            )

        except Exception as e:
            self.logger.error(f"Notification template callback error: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–∞")
            return

        await callback.answer()
