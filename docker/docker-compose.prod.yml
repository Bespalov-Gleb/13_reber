version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: cafe_bot_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: cafe_bot_redis_prod
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_prod_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Bot Application (Production)
  bot:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: cafe_bot_app_prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - BOT_TOKEN=${BOT_TOKEN}
      - BOT_WEBHOOK_URL=${BOT_WEBHOOK_URL}
      - BOT_WEBHOOK_PATH=${BOT_WEBHOOK_PATH}
      - YOOKASSA_SHOP_ID=${YOOKASSA_SHOP_ID}
      - YOOKASSA_SECRET_KEY=${YOOKASSA_SECRET_KEY}
      - YANDEX_MAPS_API_KEY=${YANDEX_MAPS_API_KEY}
      - IIKO_API_LOGIN=${IIKO_API_LOGIN}
      - IIKO_API_PASSWORD=${IIKO_API_PASSWORD}
      - ADMIN_USER_IDS=${ADMIN_USER_IDS}
      - CAFE_NAME=${CAFE_NAME}
      - CAFE_ADDRESS=${CAFE_ADDRESS}
      - CAFE_PHONE=${CAFE_PHONE}
      - CAFE_WORKING_HOURS=${CAFE_WORKING_HOURS}
      - CAFE_DELIVERY_ZONE_RADIUS=${CAFE_DELIVERY_ZONE_RADIUS}
      - CAFE_MIN_ORDER_AMOUNT=${CAFE_MIN_ORDER_AMOUNT}
      - LOG_LEVEL=${LOG_LEVEL}
      - SECRET_KEY=${SECRET_KEY}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - ENVIRONMENT=production
    volumes:
      - bot_prod_logs:/app/logs
      - bot_media:/app/media
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Nginx (Production)
  nginx:
    image: nginx:alpine
    container_name: cafe_bot_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - bot_media:/var/www/media
    depends_on:
      - bot
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: cafe_bot_backup
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backup:/backup
      - ./scripts/backup.sh:/backup.sh
    command: /bin/sh -c "while true; do sleep 86400; /backup.sh; done"
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - backup

volumes:
  postgres_prod_data:
  redis_prod_data:
  bot_prod_logs:
  bot_media:

networks:
  default:
    name: cafe_bot_prod_network